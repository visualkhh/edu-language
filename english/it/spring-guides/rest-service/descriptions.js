const DESCRIPTIONS = [{"en":{"desc":"This guide walks you through the process of creating a “Hello, World” RESTful web service with Spring.","audio":"https://papago.naver.com/apis/tts/c_lt_2622-nvoice_clara_2.0.25_272f037c08bf4386bd032e81eeca1850-1612934556469"},"ko":{"desc":"본 가이드에서는 \"Hello, World\" RESTFul 웹 서비스를 Spring과 함께 만드는 과정을 안내합니다."}},{"en":{"desc":"You will build a service that will accept HTTP GET requests","audio":"https://papago.naver.com/apis/tts/c_lt_1099-nvoice_clara_2.0.25_2a76f94f056f8d31ab45c524b031f0d9-1612934556859"},"ko":{"desc":"HTTP GET 요청을 수락하는 서비스를 구축합니다."}},{"en":{"desc":"It will respond with a JSON representation of a greeting, as the following listing shows","audio":"https://papago.naver.com/apis/tts/c_lt_3725-nvoice_clara_2.0.25_214f8a1f770a04fc88d19a903340da02-1612934557433"},"ko":{"desc":"다음 목록과 같이 JSON의 인사말로 응답합니다."}},{"en":{"desc":"You can customize the greeting with an optional name parameter in the query string, as the following listing shows","audio":"https://papago.naver.com/apis/tts/c_lt_5613-nvoice_clara_2.0.25_9eeb8f186b8dcf18ed38e662af5f9da9-1612934558293"},"ko":{"desc":"다음 목록은 다음과 같이 쿼리 문자열의 선택적 이름 매개 변수를 사용하여 인사말을 사용자 정의할 수 있습니다."}},{"en":{"desc":"The name parameter value overrides the default value of World and is reflected in the response, as the following listing show","audio":"https://papago.naver.com/apis/tts/c_lt_5277-nvoice_clara_2.0.25_ac5c85ac8d22f0b767580833692fcc0b-1612934559219"},"ko":{"desc":"이름 매개 변수 값은 월드의 기본값을 재정의하고 다음 목록처럼 응답에 반영됩니다."}},{"en":{"desc":"How to complete this guide\nLike most Spring Getting Started guides, you can start from scratch and complete each step or you can bypass basic setup steps that are already familiar to you. Either way, you end up with working code","audio":"https://papago.naver.com/apis/tts/c_lt_4338-nvoice_clara_2.0.25_6e3da2f5502308a168e617c431b852e0-1612934560237"},"ko":{"desc":"이 가이드를 완료하는 방법\n대부분의 봄 시작 가이드와 마찬가지로 처음부터 시작하여 각 단계를 완료하거나 이미 익숙한 기본 설정 단계를 건너뛸 수 있습니다. 어느 쪽이든, 결국엔 작업 코드가 생기게 됩니다."}},{"en":{"desc":"Starting with Spring Initialize\nFor all Spring applications, you should start with the Spring Initializr. The Initializr offers a fast way to pull in all the dependencies you need for an application and does a lot of the setup for you. This example needs only the Spring Web dependency","audio":"https://papago.naver.com/apis/tts/c_lt_6336-nvoice_clara_2.0.25_c295caceec51da43d81d85e23022233e-1612934561477"},"ko":{"desc":"스프링 초기화 시작\n모든 스프링 애플리케이션의 경우 스프링 이니셜라이저부터 시작해야 합니다. Initializer는 응용프로그램에 필요한 모든 종속성을 신속하게 가져올 수 있는 방법을 제공하며 많은 설정을 수행합니다. 이 예에서는 스프링 웹 종속성만 필요합니다."}},{"en":{"desc":"You can get a Maven build file with the necessary dependencies directly from the Spring Initializr. The following listing shows the pom.xml file that is created when you choose Maven","audio":"https://papago.naver.com/apis/tts/c_lt_8307-nvoice_clara_2.0.25_a77700910c2cfc8a240e7b0b5ce8b5f7-1612934562904"},"ko":{"desc":"Spring Initializer에서 필요한 종속성이 있는 Maven 빌드 파일을 직접 가져올 수 있습니다. 다음 목록은 Maven을 선택할 때 생성되는 pom.xml 파일을 보여줍니다."}},{"en":{"desc":"You can get a Gradle build file with the necessary dependencies directly from the Spring Initializr. The following listing shows the build.gradle file that is created when you choose Gradle","audio":"https://papago.naver.com/apis/tts/c_lt_1417-nvoice_clara_2.0.25_135a303e78e4ecba33b406c34626409e-1612934564134"},"ko":{"desc":"Spring Initializer에서 필요한 종속성이 있는 Gradle 빌드 파일을 직접 가져올 수 있습니다. 다음 목록은 Gradle을 선택할 때 생성되는 build.gradle 파일을 보여줍니다."}},{"en":{"desc":"Create a Resource Representation Class\nNow that you have set up the project and build system, you can create your web service","audio":"https://papago.naver.com/apis/tts/c_lt_5849-nvoice_clara_2.0.25_53a6dbacb0e0d6653c415c55f455feca-1612934564854"},"ko":{"desc":"리소스 표현 클래스 생성\n이제 프로젝트 및 빌드 시스템을 설정했으므로 웹 서비스를 생성할 수 있습니다."}},{"en":{"desc":"Begin the process by thinking about service interactions.","audio":"https://papago.naver.com/apis/tts/c_lt_7583-nvoice_clara_2.0.25_cce3a6ca9f24f8871c4495416aa84e0a-1612934565463"},"ko":{"desc":"서비스 상호 작용을 고려하여 프로세스를 시작합니다."}},{"en":{"desc":"he service will handle GET requests for /greeting, optionally with a name parameter in the query string. The GET request should return a 200 OK response with JSON in the body that represents a greeting. It should resemble the following output","audio":"https://papago.naver.com/apis/tts/c_lt_7720-nvoice_clara_2.0.25_44e6658d7f2b688efdcc2ead263ed0ea-1612934566560"},"ko":{"desc":"서비스는 /greeting에 대한 GET 요청을 처리하며, 선택적으로 쿼리 문자열의 이름 매개 변수를 사용합니다. GET 요청은 인사말을 나타내는 본문에 JSON이 있는 200개의 OK 응답을 반환해야 합니다. 다음과 같은 출력과 유사해야 합니다."}},{"en":{"desc":"The id field is a unique identifier for the greeting, and content is the textual representation of the greeting","audio":"https://papago.naver.com/apis/tts/c_lt_1563-nvoice_clara_2.0.25_7e9efe54f71b823d215e971c9c4c4e17-1612934567415"},"ko":{"desc":"ID 필드는 인사말의 고유 식별자이며, 내용은 인사말의 텍스트 표현입니다."}},{"en":{"desc":"To model the greeting representation, create a resource representation class. To do so, provide a plain old Java object with fields, constructors, and accessors for the id and content data, as the following listing (from src/main/java/com/example/restservice/Greeting.java) shows","audio":"https://papago.naver.com/apis/tts/c_lt_3753-nvoice_clara_2.0.25_00dc97142d61f21a2f20634310ce4e95-1612934568790"},"ko":{"desc":"인사말 표현을 모형화하려면 리소스 표현 클래스를 만듭니다. 이렇게 하려면 다음과 같은 목록(src/main/java/com/example/restservice/Greeting.java에서)과 같이 ID 및 컨텐츠 데이터에 대한 필드, 생성자 및 액세스자를 포함하는 일반 이전 Java 개체를 제공하십시오."}},{"en":{"desc":"This application uses the Jackson JSON library to automatically marshal instances of type Greeting into JSON. Jackson is included by default by the web starter.","audio":"https://papago.naver.com/apis/tts/c_lt_1703-nvoice_clara_2.0.25_d8286270c570a5a18965ae05e05d01bf-1612934569834"},"ko":{"desc":"이 응용 프로그램은 Jackson JSON 라이브러리를 사용하여 인사말 유형의 인스턴스를 JSON으로 자동으로 정리합니다. Jackson은 기본적으로 웹 시작 프로그램에 의해 포함됩니다."}},{"en":{"desc":"Create a Resource Controller\nIn Spring’s approach to building RESTful web services, HTTP requests are handled by a controller","audio":"https://papago.naver.com/apis/tts/c_lt_6713-nvoice_clara_2.0.25_ad66e46f9f05d068207cc09945e339db-1612934570889"},"ko":{"desc":"리소스 컨트롤러 생성\nRESTFul 웹 서비스 구축에 대한 Spring의 접근법에서, HTTP 요청은 컨트롤러에 의해 처리된다."}},{"en":{"desc":"These components are identified by the @RestController annotation, and the GreetingController shown in the following listing (from src/main/java/com/example/restservice/GreetingController.java) handles GET requests for /greeting by returning a new instance of the Greeting class","audio":"https://papago.naver.com/apis/tts/c_lt_1256-nvoice_clara_2.0.25_ad67619c19fc612fde051046af1f4f2e-1612934572426"},"ko":{"desc":"이러한 구성 요소는 @RestController 주석으로 식별되며, 다음 목록에 표시된 인사말 컨트롤러(src/main/java/com/example/restservice/GreetingController.java)는 인사말 클래스의 새 인스턴스를 반환하여 /greeting 요청을 처리합니다."}},{"en":{"desc":"This controller is concise and simple, but there is plenty going on under the hood. We break it down step by step.","audio":"https://papago.naver.com/apis/tts/c_lt_6545-nvoice_clara_2.0.25_15c3e155cc7c7b48dd3edfbdca1a32ab-1612934573556"},"ko":{"desc":"이 컨트롤러는 간결하고 간단하지만, 많은 작업이 진행 중입니다. 우리는 그것을 차근차근 분해한다."}},{"en":{"desc":"The @GetMapping annotation ensures that HTTP GET requests to /greeting are mapped to the greeting() method.","audio":"https://papago.naver.com/apis/tts/c_lt_4147-nvoice_clara_2.0.25_d426722637d99a65c3edb347c7ef15ee-1612934574376"},"ko":{"desc":"@GetMapping 주석을 사용하면 /greeting에 대한 HTTP GET 요청이 인사말() 메서드에 매핑됩니다."}},{"en":{"desc":"@RequestParam binds the value of the query string parameter name into the name parameter of the greeting() method. If the name parameter is absent in the request, the defaultValue of World is used.","audio":"https://papago.naver.com/apis/tts/c_lt_8782-nvoice_clara_2.0.25_d220e830122310185d6f98ff9894f303-1612934575399"},"ko":{"desc":"@RequestParam은 쿼리 문자열 매개 변수 이름의 값을 인사말() 메서드의 이름 매개 변수에 바인딩합니다. 요청에 이름 매개 변수가 없는 경우 기본값인 World가 사용됩니다."}},{"en":{"desc":"The implementation of the method body creates and returns a new Greeting object with id and content attributes based on the next value from the counter and formats the given name by using the greeting template.","audio":"https://papago.naver.com/apis/tts/c_lt_3382-nvoice_clara_2.0.25_60c8c7f2a71d1ab0d511d5a643bc7af7-1612934576428"},"ko":{"desc":"메서드 본문을 구현하면 카운터의 다음 값을 기준으로 ID 및 내용 특성을 가진 새 인사말 개체를 만들고 반환하며 인사말 템플릿을 사용하여 지정된 이름을 포맷합니다."}},{"en":{"desc":"A key difference between a traditional MVC controller and the RESTful web service controller shown earlier is the way that the HTTP response body is created. Rather than relying on a view technology to perform server-side rendering of the greeting data to HTML, this RESTful web service controller populates and returns a Greeting object. The object data will be written directly to the HTTP response as JSON.","audio":"https://papago.naver.com/apis/tts/c_lt_7716-nvoice_clara_2.0.25_f74cc459de07d0b1d98e83db034e8a38-1612934578156"},"ko":{"desc":"기존 MVC 컨트롤러와 앞에서 설명한 RESTFul 웹 서비스 컨트롤러의 주요 차이점은 HTTP 응답 본문을 생성하는 방법입니다. 이 RESTful 웹 서비스 컨트롤러는 인사말 데이터를 HTML로 서버측 렌더링을 수행하는 보기 기술에 의존하지 않고 인사말 개체를 채우고 반환합니다. 개체 데이터는 HTTP 응답에 JSON으로 직접 기록됩니다."}},{"en":{"desc":"This code uses Spring @RestController annotation, which marks the class as a controller where every method returns a domain object instead of a view. It is shorthand for including both @Controller and @ResponseBody.","audio":"https://papago.naver.com/apis/tts/c_lt_2939-nvoice_clara_2.0.25_1800a116bb75db2ef36c4ee496f4129e-1612934579392"},"ko":{"desc":"이 코드는 Spring @RestController 주석을 사용하며, 클래스를 모든 메서드가 보기 대신 도메인 개체를 반환하는 컨트롤러로 표시합니다. @Controller와 @ResponseBody를 모두 포함하는 줄임말입니다."}},{"en":{"desc":"The Greeting object must be converted to JSON. Thanks to Spring’s HTTP message converter support, you need not do this conversion manually. Because Jackson 2 is on the classpath, Spring’s MappingJackson2HttpMessageConverter is automatically chosen to convert the Greeting instance to JSON.","audio":"https://papago.naver.com/apis/tts/c_lt_8512-nvoice_clara_2.0.25_7cd826760c460c5f3c3cd18b9046e7ec-1612934580719"},"ko":{"desc":"인사말 개체를 JSON으로 변환해야 합니다. Spring의 HTTP 메시지 변환기 지원 덕분에 이 변환을 수동으로 수행할 필요가 없습니다. 잭슨2가 수업 중이기 때문에 스프링스 맵핑 잭슨2인사말 인스턴스를 JSON으로 변환하기 위해 HttpMessageConverter가 자동으로 선택됩니다."}},{"en":{"desc":"@SpringBootApplication is a convenience annotation that adds all of the following","audio":"https://papago.naver.com/apis/tts/c_lt_6187-nvoice_clara_2.0.25_9f93c8b18805108cefc10a42f06b28e8-1612934581844"},"ko":{"desc":"@SpringBootApplication은 다음 사항을 모두 추가하는 편리한 주석입니다."}},{"en":{"desc":"@Configuration: Tags the class as a source of bean definitions for the application context","audio":"https://papago.naver.com/apis/tts/c_lt_1968-nvoice_clara_2.0.25_5456e0514314e6ebbe1cf70ea556d030-1612934582563"},"ko":{"desc":"@구성: 클래스를 응용 프로그램 컨텍스트에 대한 bean 정의 소스로 태그 지정"}},{"en":{"desc":"@EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. For example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet","audio":"https://papago.naver.com/apis/tts/c_lt_4374-nvoice_clara_2.0.25_1825de2ece3da459df48032e136cdcd8-1612934583893"},"ko":{"desc":"@AutoConfiguration 활성화: Spring Boot에 클래스 경로 설정, 기타 콩 및 다양한 속성 설정에 따라 콩 추가를 시작하도록 지시합니다. 예를 들어, spring-webmvc가 클래스 경로에 있는 경우 이 주석은 응용 프로그램을 웹 응용 프로그램으로 플래그를 지정하고 DispatcherServlet 설정과 같은 주요 동작을 활성화합니다."}},{"en":{"desc":"@ComponentScan: Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers.","audio":"https://papago.naver.com/apis/tts/c_lt_4415-nvoice_clara_2.0.25_12110a7be904fa7928b53759dc171094-1612934585127"},"ko":{"desc":"@ComponentScan: 스프링이 컨트롤러를 찾을 수 있도록 com/예제 패키지에서 다른 구성 요소, 구성 및 서비스를 찾아보라고 합니다."}},{"en":{"desc":"The main() method uses Spring Boot’s SpringApplication.run() method to launch an application. Did you notice that there was not a single line of XML? There is no web.xml file, either. This web application is 100% pure Java and you did not have to deal with configuring any plumbing or infrastructure","audio":"https://papago.naver.com/apis/tts/undefined"},"ko":{"desc":"메인() 메소드는 스프링 부트의 스프링 애플리케이션.run() 메소드를 사용하여 응용 프로그램을 시작합니다. XML이 한 줄도 없다는 것을 알아챘습니까? web.xml 파일도 없습니다. 이 웹 애플리케이션은 100% 순수 Java이므로 배관이나 인프라를 구성할 필요가 없습니다."}},{"en":{"desc":"Build an executable JAR","audio":"https://papago.naver.com/apis/tts/c_lt_8201-nvoice_clara_2.0.25_85ecc617ffa27428d2e37f2f96e37368-1612934586751"},"ko":{"desc":"실행 파일 JAR 빌드"}},{"en":{"desc":"You can run the application from the command line with Gradle or Maven. You can also build a single executable JAR file that contains all the necessary dependencies, classes, and resources and run that. Building an executable jar makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, across different environments, and so forth.\n\n","audio":"https://papago.naver.com/apis/tts/c_lt_9147-nvoice_clara_2.0.25_d8441fda21b19cbbbfd4ad8d818f3947-1612934587891"},"ko":{"desc":"Gradle 또는 Maven을 사용하여 명령줄에서 응용 프로그램을 실행할 수 있습니다. 필요한 모든 종속성, 클래스 및 리소스를 포함하는 단일 실행 JAR 파일을 빌드하고 이를 실행할 수도 있습니다. 실행 가능한 항아리를 구축하면 개발 라이프사이클 전체에 걸쳐, 여러 환경에 걸쳐 애플리케이션으로 서비스를 쉽게 발송, 버전화 및 배포할 수 있습니다."}},{"en":{"desc":"If you use Gradle, you can run the application by using ./gradlew bootRun. Alternatively, you can build the JAR file by using ./gradlew build and then run the JAR file, as follows","audio":"https://papago.naver.com/apis/tts/c_lt_7312-nvoice_clara_2.0.25_966e8708d5da268d9769a43af9e58f39-1612934589333"},"ko":{"desc":"Gradle을 사용하는 경우 ./gradlew bootRun을 사용하여 응용 프로그램을 실행할 수 있습니다. 또는 ./gradlew 빌드를 사용하여 JAR 파일을 빌드한 다음 다음과 같이 JAR 파일을 실행할 수 있습니다."}},{"en":{"desc":"If you use Maven, you can run the application by using ./mvnw spring-boot:run. Alternatively, you can build the JAR file with ./mvnw clean package and then run the JAR file, as follows","audio":"https://papago.naver.com/apis/tts/c_lt_887-nvoice_clara_2.0.25_0dc596097397cdffee7435d16197de70-1612934590528"},"ko":{"desc":"Maven을 사용하는 경우 ./mvnw spring-boot:run을 사용하여 애플리케이션을 실행할 수 있습니다. 또는 다음과 같이 ./mvnw 클린 패키지로 JAR 파일을 빌드한 다음 JAR 파일을 실행할 수 있습니다."}},{"en":{"desc":"Logging output is displayed. The service should be up and running within a few seconds.\n\n","audio":"https://papago.naver.com/apis/tts/c_lt_9408-nvoice_clara_2.0.25_ac4427166a7dba77f50c464c38cc9c73-1612934591276"},"ko":{"desc":"로깅 출력이 표시됩니다. 서비스가 몇 초 내에 가동되어야 합니다."}},{"en":{"desc":"Test the Service\nNow that the service is up, visit http://localhost:8080/greeting, where you should see","audio":"https://papago.naver.com/apis/tts/c_lt_1965-nvoice_clara_2.0.25_d1cd7844b6b68b311c95087178c0b844-1612934592084"},"ko":{"desc":"서비스 테스트\n서비스가 시작되었으므로 http://localhost:8080/greeting을 방문하십시오."}},{"en":{"desc":"Provide a name query string parameter by visiting http://localhost:8080/greeting?name=User. Notice how the value of the content attribute changes from Hello, World! to Hello, User!, as the following listing shows","audio":"https://papago.naver.com/apis/tts/c_lt_324-nvoice_clara_2.0.25_f5bc3cb386900eea355fbbc4e256c0b0-1612934593321"},"ko":{"desc":"http://localhost:8080/greeting?name=User를 방문하여 이름 쿼리 문자열 매개 변수를 제공합니다. 다음 목록과 같이 콘텐츠 속성 값이 Hello, World!에서 Hello, User!로 어떻게 변경되는지 주목하십시오."}},{"en":{"desc":"This change demonstrates that the @RequestParam arrangement in GreetingController is working as expected. The name parameter has been given a default value of World but can be explicitly overridden through the query string","audio":"https://papago.naver.com/apis/tts/c_lt_1314-nvoice_clara_2.0.25_8628ca032a288e4dc59204516dd9b9c3-1612934594602"},"ko":{"desc":"이 변경 내용은 인사말 컨트롤러의 @RequestParam 배열이 예상대로 작동하고 있음을 나타냅니다. 이름 매개 변수에는 월드의 기본값이 지정되었지만 쿼리 문자열을 통해 명시적으로 재정의할 수 있습니다."}},{"en":{"desc":"Notice also how the id attribute has changed from 1 to 2. This proves that you are working against the same GreetingController instance across multiple requests and that its counter field is being incremented on each call as expected","audio":"https://papago.naver.com/apis/tts/c_lt_5210-nvoice_clara_2.0.25_990a4e1c902e88c3e4f1be8b20d260d4-1612934595843"},"ko":{"desc":"ID 특성이 1에서 2로 어떻게 바뀌었는지도 주목하세요. 이는 여러 요청에 걸쳐 동일한 GreetingController 인스턴스에 대해 작업 중이며 각 통화에서 해당 카운터 필드가 예상대로 증가되고 있음을 증명합니다."}},{"en":{"desc":"Summary\nCongratulations! You have just developed a RESTful web service with Spring.","audio":"https://papago.naver.com/apis/tts/c_lt_7305-nvoice_clara_2.0.25_9a1a3298b8b6e9c5ef8c783ae982ea6b-1612934596808"},"ko":{"desc":"요약\n축하합니다! 당신은 방금 봄과 함께 RESTFul 웹 서비스를 개발했습니다."}},{"en":{"desc":"See Also\nThe following guides may also be helpful","audio":"https://papago.naver.com/apis/tts/c_lt_3334-nvoice_clara_2.0.25_da628c052decb4681416f129db701d5b-1612934597413"},"ko":{"desc":"참고 항목\n다음 가이드도 도움이 될 수 있습니다."}},{"en":{"desc":"Want to write a new guide or contribute to an existing one? Check out our contribution guidelines.","audio":"https://papago.naver.com/apis/tts/c_lt_620-nvoice_clara_2.0.25_bf0666542b41408ddca35e6b3894654f-1612934597926"},"ko":{"desc":"새 가이드를 작성하시겠습니까, 아니면 기존 가이드를 작성하시겠습니까? 기부금 가이드라인을 확인해 보세요."}},{"en":{"desc":"All guides are released with an ASLv2 license for the code, and an Attribution, NoDerivatives creative commons license for the writing.","audio":"https://papago.naver.com/apis/tts/c_lt_7264-nvoice_clara_2.0.25_64051613f21c58c3b05e3d418eca3cac-1612934598790"},"ko":{"desc":"모든 가이드는 코드에 대한 ASLv2 라이센스와 작성에 대한 Attribution, NoDivative 크리에이티브 커먼즈 라이센스와 함께 릴리스됩니다."}},{"en":{"desc":"","audio":"https://papago.naver.com/apis/tts/undefined"},"ko":{}}]